// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  name          String?   @default("")
  image         String?   @default("")
  telegramName  String?   @unique @default("")
  telegramId    String?   @unique @default("")
  phone         String?   @default("")
  city          String?   @default("")
  email         String?   @unique
  emailVerified DateTime?
  Shifts        Shifts[]
  accounts      Account[]
  sessions      Session[]
}

model Shifts {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  isDriver         Boolean
  countOfPassenger Int?
  dateStart        DateTime
  dateEnd          DateTime
  comment          String
  name             String?  @default("")
  telegram         String?  @default("")
  phone            String?  @default("")
  city             String?  @default("")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  userId String
}

enum Role {
  USER
  DRIVER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
