// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  createdAt       DateTime  @default(now())
  name            String?   @default("")
  image           String?   @default("")
  telegramName    String?   @unique @default("")
  telegramId      String?   @unique @default("")
  phone           String?   @default("")
  city            String?   @default("")
  email           String?   @unique
  emailVerified   DateTime?
  dateOfBirthday  DateTime?
  passport        String?
  passportAddress String?
  // TODO: remove @default(true)
  isAdmin         Boolean?  @default(true)
  Shifts          Shifts[]
  accounts        Account[]
  sessions        Session[]
}

enum Direction {
  TO
  BACK
}

enum Choice {
  YES
  NO
}

enum DriverChoice {
  YES
  NO
  WITH_DRIVER
}

enum ChiefShift {
  MORNING
  EVENING
}

enum ShiftStatus {
  ACTIVE
  CANCELLED
}

model Shifts {
  id                     String       @id @default(cuid())
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  isDriver               DriverChoice
  getVolunteers          Choice?
  dateStart              DateTime
  dateEnd                DateTime
  comment                String?
  countOfPassengerTo     Int?
  countOfPassengerBack   Int?
  telegramNameDriverTo   String?
  telegramNameDriverBack String?
  name                   String?
  telegram               String?
  phone                  String?
  city                   String?
  direction              Direction[]
  isSupervisor           Choice?
  chiefShift             ChiefShift?
  status                 ShiftStatus? @default(ACTIVE)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  userId String
}

enum Role {
  USER
  DRIVER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Supervisor {
  name  String
  phone String @unique
}

model Chief {
  name  String
  phone String @unique
}
